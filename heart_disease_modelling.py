# -*- coding: utf-8 -*-
"""Heart Disease modelling

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ih8SRjU6FQQqs_SFDhGP9ZU3W3hFJTSU
"""

# import libraly
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# data part
downloaded = pd.read_csv('/content/drive/My Drive/CSV/datasets_heart.csv')
#downloaded.isnull().sum()
#downloaded.corr().abs().nlargest(5,'target').index
downloaded.describe()
#print(downloaded.shape)

# data mining
sns.countplot(downloaded['target'],hue=downloaded['exang'])

sns.countplot(downloaded['target'],hue=downloaded['cp'])

sns.countplot(downloaded['target'],hue=downloaded['sex'])

# show corr
plt.figure(figsize=(10,10))
sns.heatmap(downloaded.corr(),annot=True,fmt='0.2f')
plt.show()

# make dummies
cp_dum = pd.get_dummies(downloaded['cp'],prefix='cp')
thal_dum = pd.get_dummies(downloaded['thal'],prefix='thal')
slope_dum = pd.get_dummies(downloaded['slope'],prefix='slope')

frame = [downloaded,cp_dum,thal_dum,slope_dum]
downloaded = pd.concat(frame,axis=1)
downloaded.head()

downloaded = downloaded.drop(['cp','slope','thal'],axis=1)
downloaded.head()

# Modeling part
X = downloaded.drop(['target'],axis=1)
y = downloaded['target']
#print(X.shape)
#print(y.head())

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)
#print(X_test.shape)
print(X_train.shape)
regr = LogisticRegression(max_iter=1000)
regr.fit(X_train,y_train)
print(regr.score(X_train,y_train))
y_pred = regr.predict(X_test)

XX = X.drop(['age','sex','trestbps','chol','fbs','restecg','thalach','ca'],axis=1)
XX_train,XX_test,yy_train,yy_test = train_test_split(XX,y,test_size=0.2,random_state=0)

regrr = LogisticRegression(max_iter=1000)
regrr.fit(XX_train,yy_train)
print(regrr.score(XX_train,yy_train))

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))

# ROC curve
from sklearn.metrics import plot_roc_curve
plot_roc_curve(regr,X_test,y_test)

